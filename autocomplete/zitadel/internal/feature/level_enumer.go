// Code generated by "enumer -type Level -transform snake -trimprefix Level"; DO NOT EDIT.

package feature

import (
	"fmt"
	"strings"
)

const _LevelName = "unspecifiedsysteminstanceorgprojectappuser"

var _LevelIndex = [...]uint8{0, 11, 17, 25, 28, 35, 38, 42}

const _LevelLowerName = "unspecifiedsysteminstanceorgprojectappuser"

func (i Level) String() string {
	if i < 0 || i >= Level(len(_LevelIndex)-1) {
		return fmt.Sprintf("Level(%d)", i)
	}
	return _LevelName[_LevelIndex[i]:_LevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LevelNoOp() {
	var x [1]struct{}
	_ = x[LevelUnspecified-(0)]
	_ = x[LevelSystem-(1)]
	_ = x[LevelInstance-(2)]
	_ = x[LevelOrg-(3)]
	_ = x[LevelProject-(4)]
	_ = x[LevelApp-(5)]
	_ = x[LevelUser-(6)]
}

var _LevelValues = []Level{LevelUnspecified, LevelSystem, LevelInstance, LevelOrg, LevelProject, LevelApp, LevelUser}

var _LevelNameToValueMap = map[string]Level{
	_LevelName[0:11]:       LevelUnspecified,
	_LevelLowerName[0:11]:  LevelUnspecified,
	_LevelName[11:17]:      LevelSystem,
	_LevelLowerName[11:17]: LevelSystem,
	_LevelName[17:25]:      LevelInstance,
	_LevelLowerName[17:25]: LevelInstance,
	_LevelName[25:28]:      LevelOrg,
	_LevelLowerName[25:28]: LevelOrg,
	_LevelName[28:35]:      LevelProject,
	_LevelLowerName[28:35]: LevelProject,
	_LevelName[35:38]:      LevelApp,
	_LevelLowerName[35:38]: LevelApp,
	_LevelName[38:42]:      LevelUser,
	_LevelLowerName[38:42]: LevelUser,
}

var _LevelNames = []string{
	_LevelName[0:11],
	_LevelName[11:17],
	_LevelName[17:25],
	_LevelName[25:28],
	_LevelName[28:35],
	_LevelName[35:38],
	_LevelName[38:42],
}

// LevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LevelString(s string) (Level, error) {
	if val, ok := _LevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Level values", s)
}

// LevelValues returns all values of the enum
func LevelValues() []Level {
	return _LevelValues
}

// LevelStrings returns a slice of all String values of the enum
func LevelStrings() []string {
	strs := make([]string, len(_LevelNames))
	copy(strs, _LevelNames)
	return strs
}

// IsALevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Level) IsALevel() bool {
	for _, v := range _LevelValues {
		if i == v {
			return true
		}
	}
	return false
}
