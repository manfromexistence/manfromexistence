syntax = "proto3";

package zitadel.user.v3alpha;

option go_package = "github.com/zitadel/zitadel/pkg/grpc/user/v3alpha";

import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "zitadel/user/v3alpha/user.proto";
import "zitadel/object/v2beta/object.proto";

message SearchQuery {
  oneof query {
    option (validate.required) = true;


    // Union the results of each sub query ('OR').
    OrQuery or_query = 1;
    // Limit the result to match all sub queries ('AND').
    // Note that if you specify multiple queries, they will be implicitly used as andQueries.
    // Use the andQuery in combination with orQuery and notQuery.
    AndQuery and_query = 2;
    // Exclude / Negate the result of the sub query ('NOT').
    NotQuery not_query = 3;

    // Limit the result to a specific user ID.
    UserIDQuery user_id_query = 4;
    // Limit the result to a specific organization.
    OrganizationIDQuery organization_id_query = 5;
    // Limit the result to a specific username.
    UsernameQuery username_query = 6;
    // Limit the result to a specific contact email.
    EmailQuery email_query = 7;
    // Limit the result to a specific contact phone.
    PhoneQuery phone_query = 8;
    // Limit the result to a specific state of the user.
    StateQuery state_query = 9;
    // Limit the result to a specific schema ID.
    SchemaIDQuery schema_ID_query = 10;
    // Limit the result to a specific schema type.
    SchemaTypeQuery schema_type_query = 11;
  }
}

message OrQuery {
  repeated SearchQuery queries = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =  {
      example: "[{\"userIdQuery\": {\"id\": \"163840776835432705\",\"method\": \"TEXT_QUERY_METHOD_EQUALS\"}},{\"userIdQuery\": {\"id\": \"163840776835943483\",\"method\": \"TEXT_QUERY_METHOD_EQUALS\"}}]"
    }
  ];
}
message AndQuery {
  repeated SearchQuery queries = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =  {
      example: "[{\"organizationIdQuery\": {\"id\": \"163840776835432705\",\"method\": \"TEXT_QUERY_METHOD_EQUALS\"}},{\"usernameQuery\": {\"username\": \"gigi\",\"method\": \"TEXT_QUERY_METHOD_EQUALS\"}}]"
    }
  ];
}

message NotQuery {
  SearchQuery query = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) =  {
      example: "{\"schemaIDQuery\": {\"id\": \"163840776835432705\"}}"
    }
  ];
}

message UserIDQuery {
  // Defines the ID of the user to query for.
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"163840776835432705\"";
    }
  ];
  // Defines which text comparison method used for the id query.
  zitadel.object.v2beta.TextQueryMethod method = 2 [
    (validate.rules).enum.defined_only = true
  ];
}

message OrganizationIDQuery {
  // Defines the ID of the organization to query for.
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"163840776835432705\"";
    }
  ];
  // Defines which text comparison method used for the id query.
  zitadel.object.v2beta.TextQueryMethod method = 2 [
    (validate.rules).enum.defined_only = true
  ];
}

message UsernameQuery {
  // Defines the username to query for.
  string username = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"gigi-giraffe\"";
    }
  ];
  // Defines which text comparison method used for the username query.
  zitadel.object.v2beta.TextQueryMethod method = 2 [
    (validate.rules).enum.defined_only = true
  ];
  // Defines that the username must only be unique in the organisation.
  bool is_organization_specific = 3;
}

message EmailQuery {
  // Defines the email of the user to query for.
  string address = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"gigi@zitadel.com\"";
    }
  ];
  // Defines which text comparison method used for the email query.
  zitadel.object.v2beta.TextQueryMethod method = 2 [
    (validate.rules).enum.defined_only = true
  ];
}

message PhoneQuery {
  // Defines the phone of the user to query for.
  string number = 1 [
    (validate.rules).string = {min_len: 1, max_len: 20},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 20;
      example: "\"+41791234567\"";
    }
  ];
  // Defines which text comparison method used for the phone query.
  zitadel.object.v2beta.TextQueryMethod method = 2 [
    (validate.rules).enum.defined_only = true
  ];
}


message StateQuery {
  // Defines the state to query for.
  State state = 1 [
    (validate.rules).enum.defined_only = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"STATE_ACTIVE\""
    }
  ];
}

message SchemaIDQuery {
  // Defines the ID of the schema to query for.
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"163840776835432705\"";
    }
  ];
}

message SchemaTypeQuery {
  // Defines which type to query for.
  string type = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"employees\"";
    }
  ];
  // Defines which text comparison method used for the type query.
  zitadel.object.v2beta.TextQueryMethod method = 2 [
    (validate.rules).enum.defined_only = true
  ];
}

enum FieldName {
  FIELD_NAME_UNSPECIFIED = 0;
  FIELD_NAME_ID = 1;
  FIELD_NAME_CREATION_DATE = 2;
  FIELD_NAME_CHANGE_DATE = 3;
  FIELD_NAME_EMAIL = 4;
  FIELD_NAME_PHONE = 5;
  FIELD_NAME_STATE = 6;
  FIELD_NAME_SCHEMA_ID = 7;
  FIELD_NAME_SCHEMA_TYPE = 8;
}
