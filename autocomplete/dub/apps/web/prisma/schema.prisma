// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts   Account[]
  sessions   Session[]
  projects   ProjectUsers[]
  links      Link[]
  tokens     Token[]
  createdAt  DateTime       @default(now())
  subscribed Boolean        @default(true)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Token {
  id         String    @id @default(cuid())
  name       String
  hashedKey  String    @unique
  partialKey String
  expires    DateTime?
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@index([userId])
}

model Project {
  id   String  @id @default(cuid())
  name String
  slug String  @unique
  logo String?

  plan              String  @default("free")
  stripeId          String? @unique // Stripe subscription ID
  billingCycleStart Int // day of the month when the billing cycle starts
  usage             Int     @default(0)
  usageLimit        Int     @default(1000)
  aiUsage           Int     @default(0)
  aiLimit           Int     @default(10)
  linksUsage        Int     @default(0)
  linksLimit        Int     @default(25)
  domainsLimit      Int     @default(3)
  tagsLimit         Int     @default(5)
  usersLimit        Int     @default(1)
  monitoringId      String? @unique // cron job ID for monitoring

  users      ProjectUsers[]
  invites    ProjectInvite[]
  sentEmails SentEmail[]
  links      Link[]
  domains    Domain[]
  tags       Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inviteCode  String? @unique
  defaultDomains DefaultDomains[]
}

model ProjectInvite {
  email     String
  expires   DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())

  @@unique([email, projectId])
  @@index([projectId])
}

model DefaultDomains {
  id                String   @id @default(cuid())
  dubsh             Boolean  @default(true)
  chatgpt           Boolean  @default(true)
  sptifi            Boolean  @default(true)
  gitnew            Boolean  @default(true)
  amznid            Boolean  @default(true)
  loooooooong       Boolean  @default(false)
  projectId         String   @unique
  project           Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}


enum Role {
  owner
  member
}

model ProjectUsers {
  id        String   @id @default(cuid())
  role      Role     @default(member)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@index([projectId])
}

model SentEmail {
  id        String   @id @default(cuid())
  type      String
  createdAt DateTime @default(now())
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@index([projectId])
}

model Domain {
  id          String    @id @default(cuid())
  slug        String    @unique
  verified    Boolean   @default(false)
  placeholder String    @default("https://dub.co/help/article/what-is-dub")
  description String?
  primary     Boolean   @default(false)
  archived    Boolean   @default(false)
  expiredUrl  String? @db.LongText // URL to redirect to for expired links
  lastChecked DateTime  @default(now())
  links       Link[]
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?

  // TODO: migrate these attributes to Link model
  target      String?
  type        String    @default("redirect")
  clicks      Int       @default(0)
  lastClicked DateTime? // when the link was last clicked
  publicStats Boolean   @default(false)

  // these attributes will exist on both Link and Domain models
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index(projectId)
  @@index(clicks(sort: Desc))
  @@index(lastClicked)
  @@index(lastChecked(sort: Asc))
}

model Link {
  id          String    @id @default(cuid())
  domain      String // domain of the link (e.g. dub.sh) – also stored on Redis
  key         String // key of the link (e.g. /github) – also stored on Redis
  url         String    @db.LongText // target url (e.g. https://github.com/dubinc/dub) – also stored on Redis
  archived    Boolean   @default(false) // whether the link is archived or not
  expiresAt   DateTime? // when the link expires – stored on Redis via ttl
  expiredUrl  String?   @db.LongText // URL to redirect the user to when the link is expired
  password    String? // password to access the link

  proxy       Boolean @default(false) // Proxy to use custom OG tags (stored on redis) – if false, will use OG tags from target url
  title       String? // OG title for the link (e.g. Dub.co - Open-Source Link Management Infrastructure)
  description String? @db.VarChar(280) // OG description for the link (e.g. An open-source link management tool for modern marketing teams to create, share, and track short links.)
  image       String? @db.LongText // OG image for the link (e.g. https://d.to/og)

  // UTM parameters
  utm_source   String? // UTM source for the link (e.g. youtube.com)
  utm_medium   String? // UTM medium for the link (e.g. social)
  utm_campaign String? // UTM campaign for the link (e.g. summer-sale)
  utm_term     String? // UTM term for the link (e.g. dub)
  utm_content  String? // UTM content for the link (e.g. description)

  // Link cloaking/masking via rewrite
  rewrite Boolean @default(false) // whether to rewrite the link or not

  // Custom device targeting
  ios     String? @db.LongText // custom link for iOS devices
  android String? @db.LongText // custom link for Android devices
  geo     Json?   @db.Json // custom link for specific countries

  // User who created the link
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Project that the link belongs to
  project       Project? @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId     String?
  // Relational reference to the project domain
  projectDomain Domain?  @relation(fields: [domain], references: [slug], onUpdate: Cascade, onDelete: Cascade)

  publicStats   Boolean   @default(false) // whether to show public stats or not
  clicks        Int       @default(0) // number of clicks
  lastClicked   DateTime? // when the link was last clicked
  checkDisabled Boolean   @default(false) // disable 404 checking
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Link tags
  tag   Tag?    @relation(fields: [tagId], references: [id])
  tagId String?

  // (Upcoming) multiple link tags
  tags  LinkTag[]

  // Comments on the particular shortlink
  comments String? @db.LongText

  // TODO: might wanna add indices for utm_source, utm_medium, utm_campaign

  @@unique([domain, key])
  @@index(projectId)
  @@index(domain)
  @@index(tagId)
  @@index(proxy)
  @@index(password)
  @@index(createdAt(sort: Desc))
  @@index(clicks(sort: Desc))
  @@index(lastClicked)
  @@index(checkDisabled)
  @@index(userId)
  @@fulltext([key, url])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("blue")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String
  links     Link[]
  linksNew  LinkTag[]

  @@unique([name, projectId])
  @@index(projectId)
}

model LinkTag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  link      Link     @relation(fields: [linkId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  linkId    String
  tag       Tag      @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId     String

  @@unique([linkId, tagId])
  @@index(linkId)
  @@index(tagId)
}

model jackson_index {
  id       Int    @id @default(autoincrement())
  key      String @db.VarChar(250)
  storeKey String @db.VarChar(250)

  @@index([key], map: "_jackson_index_key")
  @@index([key, storeKey], map: "_jackson_index_key_store")
}

model jackson_store {
  key        String    @id @db.VarChar(250)
  value      String    @db.Text
  iv         String?   @db.VarChar(64)
  tag        String?   @db.VarChar(64)
  namespace  String?   @db.VarChar(64)
  createdAt  DateTime  @default(now()) @db.Timestamp(0)
  modifiedAt DateTime? @db.Timestamp(0)

  @@index([namespace], map: "_jackson_store_namespace")
}

model jackson_ttl {
  key       String @id @db.VarChar(250)
  expiresAt BigInt

  @@index([expiresAt], map: "_jackson_ttl_expires_at")
}
