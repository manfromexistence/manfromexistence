// This file is automatically generated. Do not modify it.

import {CorePalette} from '../palettes/core_palette';
import { hexFromArgb } from '../utils/string_utils';


/**
 * Represents a Material color scheme, a mapping of color roles to colors.
 */
export class Scheme {
  get primary(): string {
    return this.props.primary;
  }

  get onPrimary(): string {
    return this.props.onPrimary;
  }

  get primaryContainer(): string {
    return this.props.primaryContainer;
  }

  get onPrimaryContainer(): string {
    return this.props.onPrimaryContainer;
  }

  get secondary(): string {
    return this.props.secondary;
  }

  get onSecondary(): string {
    return this.props.onSecondary;
  }

  get secondaryContainer(): string {
    return this.props.secondaryContainer;
  }

  get onSecondaryContainer(): string {
    return this.props.onSecondaryContainer;
  }

  get tertiary(): string {
    return this.props.tertiary;
  }

  get onTertiary(): string {
    return this.props.onTertiary;
  }

  get tertiaryContainer(): string {
    return this.props.tertiaryContainer;
  }

  get onTertiaryContainer(): string {
    return this.props.onTertiaryContainer;
  }

  get error(): string {
    return this.props.error;
  }

  get onError(): string {
    return this.props.onError;
  }

  get errorContainer(): string {
    return this.props.errorContainer;
  }

  get onErrorContainer(): string {
    return this.props.onErrorContainer;
  }

  get background(): string {
    return this.props.background;
  }

  get onBackground(): string {
    return this.props.onBackground;
  }

  get surface(): string {
    return this.props.surface;
  }

  get onSurface(): string {
    return this.props.onSurface;
  }

  get surfaceVariant(): string {
    return this.props.surfaceVariant;
  }

  get onSurfaceVariant(): string {
    return this.props.onSurfaceVariant;
  }

  get outline(): string {
    return this.props.outline;
  }

  get outlineVariant(): string {
    return this.props.outlineVariant;
  }

  get shadow(): string {
    return this.props.shadow;
  }

  get scrim(): string {
    return this.props.scrim;
  }

  get inverseSurface(): string {
    return this.props.inverseSurface;
  }

  get inverseOnSurface(): string {
    return this.props.inverseOnSurface;
  }

  get inversePrimary(): string {
    return this.props.inversePrimary;
  }

  /**
   * @param argb ARGB representation of a color.
   * @return Light Material color scheme, based on the color's hue.
   */
  static light(argb: number): Scheme {
    return Scheme.lightFromCorePalette(CorePalette.of(argb));
  }

  /**
   * @param argb ARGB representation of a color.
   * @return Dark Material color scheme, based on the color's hue.
   */
  static dark(argb: number): Scheme {
    return Scheme.darkFromCorePalette(CorePalette.of(argb));
  }

  /**
   * @param argb ARGB representation of a color.
   * @return Light Material content color scheme, based on the color's hue.
   */
  static lightContent(argb: number): Scheme {
    return Scheme.lightFromCorePalette(CorePalette.contentOf(argb));
  }

  /**
   * @param argb ARGB representation of a color.
   * @return Dark Material content color scheme, based on the color's hue.
   */
  static darkContent(argb: number): Scheme {
    return Scheme.darkFromCorePalette(CorePalette.contentOf(argb));
  }

  /**
   * Light scheme from core palette
   */
  static lightFromCorePalette(core: CorePalette): Scheme {
    return new Scheme({
      primary: hexFromArgb(core.a1.tone(40)),
      onPrimary: hexFromArgb(core.a1.tone(100)),
      primaryContainer: hexFromArgb(core.a1.tone(90)),
      onPrimaryContainer: hexFromArgb(core.a1.tone(10)),
      secondary: hexFromArgb(core.a2.tone(40)),
      onSecondary: hexFromArgb(core.a2.tone(100)),
      secondaryContainer: hexFromArgb(core.a2.tone(90)),
      onSecondaryContainer: hexFromArgb(core.a2.tone(10)),
      tertiary: hexFromArgb(core.a3.tone(40)),
      onTertiary: hexFromArgb(core.a3.tone(100)),
      tertiaryContainer: hexFromArgb(core.a3.tone(90)),
      onTertiaryContainer: hexFromArgb(core.a3.tone(10)),
      error: hexFromArgb(core.error.tone(40)),
      onError: hexFromArgb(core.error.tone(100)),
      errorContainer: hexFromArgb(core.error.tone(90)),
      onErrorContainer: hexFromArgb(core.error.tone(10)),
      background: hexFromArgb(core.n1.tone(99)),
      onBackground: hexFromArgb(core.n1.tone(10)),
      surface: hexFromArgb(core.n1.tone(99)),
      onSurface: hexFromArgb(core.n1.tone(10)),
      surfaceVariant: hexFromArgb(core.n2.tone(90)),
      onSurfaceVariant: hexFromArgb(core.n2.tone(30)),
      outline: hexFromArgb(core.n2.tone(50)),
      outlineVariant: hexFromArgb(core.n2.tone(80)),
      shadow: hexFromArgb(core.n1.tone(0)),
      scrim: hexFromArgb(core.n1.tone(0)),
      inverseSurface: hexFromArgb(core.n1.tone(20)),
      inverseOnSurface: hexFromArgb(core.n1.tone(95)),
      inversePrimary: hexFromArgb(core.a1.tone(80))
    });
  }

  /**
   * Dark scheme from core palette
   */
  static darkFromCorePalette(core: CorePalette): Scheme {
    return new Scheme({
      primary: hexFromArgb(core.a1.tone(80)),
      onPrimary: hexFromArgb(core.a1.tone(20)),
      primaryContainer: hexFromArgb(core.a1.tone(30)),
      onPrimaryContainer: hexFromArgb(core.a1.tone(90)),
      secondary: hexFromArgb(core.a2.tone(80)),
      onSecondary: hexFromArgb(core.a2.tone(20)),
      secondaryContainer: hexFromArgb(core.a2.tone(30)),
      onSecondaryContainer: hexFromArgb(core.a2.tone(90)),
      tertiary: hexFromArgb(core.a3.tone(80)),
      onTertiary: hexFromArgb(core.a3.tone(20)),
      tertiaryContainer: hexFromArgb(core.a3.tone(30)),
      onTertiaryContainer: hexFromArgb(core.a3.tone(90)),
      error: hexFromArgb(core.error.tone(80)),
      onError: hexFromArgb(core.error.tone(20)),
      errorContainer: hexFromArgb(core.error.tone(30)),
      onErrorContainer: hexFromArgb(core.error.tone(80)),
      background: hexFromArgb(core.n1.tone(10)),
      onBackground: hexFromArgb(core.n1.tone(90)),
      surface: hexFromArgb(core.n1.tone(10)),
      onSurface: hexFromArgb(core.n1.tone(90)),
      surfaceVariant: hexFromArgb(core.n2.tone(30)),
      onSurfaceVariant: hexFromArgb(core.n2.tone(80)),
      outline: hexFromArgb(core.n2.tone(60)),
      outlineVariant: hexFromArgb(core.n2.tone(30)),
      shadow: hexFromArgb(core.n1.tone(0)),
      scrim: hexFromArgb(core.n1.tone(0)),
      inverseSurface: hexFromArgb(core.n1.tone(90)),
      inverseOnSurface: hexFromArgb(core.n1.tone(20)),
      inversePrimary: hexFromArgb(core.a1.tone(40))
    });
  }

  private constructor(private readonly props: {
    primary: string,
    onPrimary: string,
    primaryContainer: string,
    onPrimaryContainer: string,
    secondary: string,
    onSecondary: string,
    secondaryContainer: string,
    onSecondaryContainer: string,
    tertiary: string,
    onTertiary: string,
    tertiaryContainer: string,
    onTertiaryContainer: string,
    error: string,
    onError: string,
    errorContainer: string,
    onErrorContainer: string,
    background: string,
    onBackground: string,
    surface: string,
    onSurface: string,
    surfaceVariant: string,
    onSurfaceVariant: string,
    outline: string,
    outlineVariant: string,
    shadow: string,
    scrim: string,
    inverseSurface: string,
    inverseOnSurface: string,
    inversePrimary: string
  }) {}

  toJSON() {
    return {
      ...this.props
    };
  }
}
