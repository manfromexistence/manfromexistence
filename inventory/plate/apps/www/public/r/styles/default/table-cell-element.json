{
  "dependencies": [
    "@udecode/plate-table"
  ],
  "doc": {
    "description": "A table cell with resizable borders and selection.",
    "docs": [
      {
        "route": "/docs/table"
      },
      {
        "route": "https://pro.platejs.org/docs/components/table-cell-element"
      }
    ],
    "examples": [
      "table-demo"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn, withProps, withRef } from '@udecode/cn';\nimport { useElement } from '@udecode/plate-common/react';\nimport { useBlockSelected } from '@udecode/plate-selection/react';\nimport {\n  TableRowPlugin,\n  useTableCellElement,\n  useTableCellElementResizable,\n  useTableCellElementResizableState,\n  useTableCellElementState,\n} from '@udecode/plate-table/react';\n\nimport { blockSelectionVariants } from './block-selection';\nimport { PlateElement } from './plate-element';\nimport { ResizeHandle } from './resizable';\n\nexport const TableCellElement = withRef<\n  typeof PlateElement,\n  {\n    hideBorder?: boolean;\n    isHeader?: boolean;\n  }\n>(({ children, className, hideBorder, isHeader, style, ...props }, ref) => {\n  const { element } = props;\n\n  const rowElement = useElement(TableRowPlugin.key);\n  const isSelectingRow = useBlockSelected(rowElement.id as string);\n\n  const {\n    borders,\n    colIndex,\n    colSpan,\n    hovered,\n    hoveredLeft,\n    isSelectingCell,\n    readOnly,\n    rowIndex,\n    rowSize,\n    selected,\n  } = useTableCellElementState();\n  const { props: cellProps } = useTableCellElement({ element: props.element });\n  const resizableState = useTableCellElementResizableState({\n    colIndex,\n    colSpan,\n    rowIndex,\n  });\n\n  const { bottomProps, hiddenLeft, leftProps, rightProps } =\n    useTableCellElementResizable(resizableState);\n\n  return (\n    <PlateElement\n      ref={ref}\n      as={isHeader ? 'th' : 'td'}\n      className={cn(\n        className,\n        'h-full overflow-visible border-none bg-background p-0',\n        hideBorder && 'before:border-none',\n        element.background ? 'bg-[--cellBackground]' : 'bg-background',\n        !hideBorder &&\n          cn(\n            isHeader && 'text-left [&_>_*]:m-0',\n            'before:size-full',\n            selected && 'before:z-10 before:bg-muted',\n            \"before:absolute before:box-border before:select-none before:content-['']\",\n            borders &&\n              cn(\n                borders.bottom?.size &&\n                  `before:border-b before:border-b-border`,\n                borders.right?.size && `before:border-r before:border-r-border`,\n                borders.left?.size && `before:border-l before:border-l-border`,\n                borders.top?.size && `before:border-t before:border-t-border`\n              )\n          )\n      )}\n      {...cellProps}\n      {...props}\n      style={\n        {\n          '--cellBackground': element.background,\n          ...style,\n        } as React.CSSProperties\n      }\n    >\n      <div\n        className=\"relative z-20 box-border h-full px-4 py-2\"\n        style={{\n          minHeight: rowSize,\n        }}\n      >\n        {children}\n      </div>\n\n      {!isSelectingCell && (\n        <div\n          className=\"group absolute top-0 size-full select-none\"\n          contentEditable={false}\n          suppressContentEditableWarning={true}\n        >\n          {!readOnly && (\n            <>\n              <ResizeHandle\n                {...rightProps}\n                className=\"-top-3 right-[-5px] w-[10px]\"\n              />\n              <ResizeHandle\n                {...bottomProps}\n                className=\"bottom-[-5px] h-[10px]\"\n              />\n              {!hiddenLeft && (\n                <ResizeHandle\n                  {...leftProps}\n                  className=\"-top-3 left-[-5px] w-[10px]\"\n                />\n              )}\n\n              {hovered && (\n                <div\n                  className={cn(\n                    'absolute -top-3 z-30 h-[calc(100%_+_12px)] w-1 bg-ring',\n                    'right-[-1.5px]'\n                  )}\n                />\n              )}\n              {hoveredLeft && (\n                <div\n                  className={cn(\n                    'absolute -top-3 z-30 h-[calc(100%_+_12px)] w-1 bg-ring',\n                    'left-[-1.5px]'\n                  )}\n                />\n              )}\n            </>\n          )}\n        </div>\n      )}\n\n      {isSelectingRow && (\n        <div className={blockSelectionVariants()} contentEditable={false} />\n      )}\n    </PlateElement>\n  );\n});\n\nTableCellElement.displayName = 'TableCellElement';\n\nexport const TableCellHeaderElement = withProps(TableCellElement, {\n  isHeader: true,\n});\n",
      "path": "plate-ui/table-cell-element.tsx",
      "target": "components/plate-ui/table-cell-element.tsx",
      "type": "registry:ui"
    },
    {
      "content": "import React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate-common';\n\nimport { cn } from '@udecode/cn';\nimport {\n  SlateElement,\n  findNode,\n  getParentNode,\n  isElement,\n} from '@udecode/plate-common';\nimport { getTableCellBorders } from '@udecode/plate-table';\n\nexport function TableCellElementStatic({\n  children,\n  className,\n  isHeader,\n  style,\n  ...props\n}: SlateElementProps & {\n  isHeader?: boolean;\n}) {\n  const { editor, element } = props;\n\n  const cellPath = findNode(editor!, {\n    match: (n) => isElement(n) && n === element,\n  })![1];\n\n  const rowPath = getParentNode(editor!, cellPath)![1];\n\n  const borders = getTableCellBorders(element, {\n    isFirstCell: cellPath.at(-1) === 0,\n    isFirstRow: rowPath.at(-1) === 0,\n  });\n\n  return (\n    <SlateElement\n      as={isHeader ? 'th' : 'td'}\n      className={cn(\n        className,\n        'h-full overflow-visible bg-background p-0',\n        element.background ? 'bg-[--cellBackground]' : 'bg-background',\n        cn(\n          isHeader && 'text-left font-normal [&_>_*]:m-0',\n          'before:size-full',\n          \"before:absolute before:box-border before:select-none before:content-['']\",\n          borders &&\n            cn(\n              borders.bottom?.size && `before:border-b before:border-b-border`,\n              borders.right?.size && `before:border-r before:border-r-border`,\n              borders.left?.size && `before:border-l before:border-l-border`,\n              borders.top?.size && `before:border-t before:border-t-border`\n            )\n        )\n      )}\n      style={\n        {\n          '--cellBackground': element.background,\n          ...style,\n        } as React.CSSProperties\n      }\n      {...props}\n    >\n      <div className=\"relative z-20 box-border h-full px-4 py-2\">\n        {children}\n      </div>\n    </SlateElement>\n  );\n}\n\nexport function TableCellHeaderStaticElement(props: SlateElementProps) {\n  return <TableCellElementStatic {...props} isHeader />;\n}\n",
      "path": "plate-ui/table-cell-element-static.tsx",
      "target": "components/plate-ui/table-cell-element-static.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "table-cell-element",
  "registryDependencies": [
    "resizable",
    "plate-element"
  ],
  "type": "registry:ui"
}