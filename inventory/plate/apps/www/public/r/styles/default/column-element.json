{
  "dependencies": [
    "@udecode/plate-layout",
    "@udecode/plate-resizable"
  ],
  "doc": {
    "description": "A resizable column component for layout.",
    "docs": [
      {
        "route": "/docs/column"
      },
      {
        "route": "https://pro.platejs.org/docs/components/column-element"
      }
    ],
    "examples": [
      "column-demo"
    ]
  },
  "files": [
    {
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { TColumnElement } from '@udecode/plate-layout';\n\nimport { cn, useComposedRef, withRef } from '@udecode/cn';\nimport { useElement, withHOC } from '@udecode/plate-common/react';\nimport { useDraggable, useDropLine } from '@udecode/plate-dnd';\nimport { ResizableProvider } from '@udecode/plate-resizable';\nimport { GripHorizontal } from 'lucide-react';\nimport { Path } from 'slate';\nimport { useReadOnly } from 'slate-react';\n\nimport { Button } from './button';\nimport { PlateElement } from './plate-element';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipPortal,\n  TooltipProvider,\n  TooltipTrigger,\n} from './tooltip';\n\nexport const ColumnElement = withHOC(\n  ResizableProvider,\n  withRef<typeof PlateElement>(({ children, className, ...props }, ref) => {\n    const readOnly = useReadOnly();\n    const { width } = useElement<TColumnElement>();\n\n    const { isDragging, previewRef, handleRef } = useDraggable({\n      canDropNode: ({ dragEntry, dropEntry }) =>\n        Path.equals(Path.parent(dragEntry[1]), Path.parent(dropEntry[1])),\n      element: props.element,\n      orientation: 'horizontal',\n      type: 'column',\n    });\n\n    return (\n      <div className=\"group/column relative\" style={{ width: width ?? '100%' }}>\n        <div\n          ref={handleRef}\n          className={cn(\n            'absolute left-1/2 top-2 z-50 -translate-x-1/2 -translate-y-1/2',\n            'pointer-events-auto flex items-center',\n            'opacity-0 transition-opacity group-hover/column:opacity-100'\n          )}\n        >\n          <ColumnDragHandle />\n        </div>\n\n        <PlateElement\n          ref={useComposedRef(ref, previewRef)}\n          className={cn(\n            className,\n            'h-full px-2 pt-2 group-first/column:pl-0 group-last/column:pr-0'\n          )}\n          {...props}\n        >\n          <div\n            className={cn(\n              'relative h-full border border-transparent p-1.5',\n              !readOnly && 'rounded-lg border-dashed border-border',\n              isDragging && 'opacity-50'\n            )}\n          >\n            {children}\n            <DropLine />\n          </div>\n        </PlateElement>\n      </div>\n    );\n  })\n);\n\nconst ColumnDragHandle = React.memo(() => {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button size=\"none\" variant=\"ghost\" className=\"h-5 px-1\">\n            <GripHorizontal\n              className=\"size-4 text-muted-foreground\"\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n              }}\n            />\n          </Button>\n        </TooltipTrigger>\n        <TooltipPortal>\n          <TooltipContent>Drag to move column</TooltipContent>\n        </TooltipPortal>\n      </Tooltip>\n    </TooltipProvider>\n  );\n});\n\nconst DropLine = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { dropLine } = useDropLine({ orientation: 'horizontal' });\n\n  if (!dropLine) return null;\n\n  return (\n    <div\n      ref={ref}\n      {...props}\n      // eslint-disable-next-line tailwindcss/no-custom-classname\n      className={cn(\n        'slate-dropLine',\n        'absolute bg-brand/50',\n        dropLine === 'left' &&\n          'inset-y-0 left-[-10.5px] w-1 group-first/column:-left-1',\n        dropLine === 'right' &&\n          'inset-y-0 right-[-11px] w-1 group-last/column:-right-1',\n        className\n      )}\n    />\n  );\n});\n",
      "path": "plate-ui/column-element.tsx",
      "target": "components/plate-ui/column-element.tsx",
      "type": "registry:ui"
    },
    {
      "content": "import React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate-common';\nimport type { TColumnElement } from '@udecode/plate-layout';\n\nimport { cn } from '@udecode/cn';\nimport { SlateElement } from '@udecode/plate-common';\n\nexport function ColumnElementStatic({\n  children,\n  className,\n  ...props\n}: SlateElementProps) {\n  const { width } = props.element as TColumnElement;\n\n  return (\n    <SlateElement\n      className={cn(className, 'border border-transparent p-1.5')}\n      style={{ width: width ?? '100%' }}\n      {...props}\n    >\n      {children}\n    </SlateElement>\n  );\n}\n",
      "path": "plate-ui/column-element-static.tsx",
      "target": "components/plate-ui/column-element-static.tsx",
      "type": "registry:ui"
    }
  ],
  "name": "column-element",
  "registryDependencies": [
    "resizable",
    "plate-element"
  ],
  "type": "registry:ui"
}