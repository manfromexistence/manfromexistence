{
  "dependencies": [
    "@udecode/plate-comments"
  ],
  "files": [
    {
      "path": "components/editor/plugins/comments-plugin.tsx",
      "content": "'use client';\n\nimport type { ExtendConfig, Path } from '@udecode/plate';\n\nimport { isSlateString } from '@udecode/plate';\nimport {\n  type BaseCommentsConfig,\n  BaseCommentsPlugin,\n} from '@udecode/plate-comments';\nimport { toTPlatePlugin, useHotkeys } from '@udecode/plate/react';\n\nexport type CommentsConfig = ExtendConfig<\n  BaseCommentsConfig,\n  {\n    activeId: string | null;\n    commentingBlock: Path | null;\n    hotkey: string[];\n    hoverId: string | null;\n    uniquePathMap: Map<string, Path>;\n  }\n>;\n\nexport const commentsPlugin = toTPlatePlugin<CommentsConfig>(\n  BaseCommentsPlugin,\n  {\n    handlers: {\n      onClick: ({ api, event, setOption, type }) => {\n        let leaf = event.target as HTMLElement;\n        let isSet = false;\n\n        const unsetActiveSuggestion = () => {\n          setOption('activeId', null);\n          isSet = true;\n        };\n\n        if (!isSlateString(leaf)) unsetActiveSuggestion();\n\n        while (leaf.parentElement) {\n          if (leaf.classList.contains(`slate-${type}`)) {\n            const commentsEntry = api.comment!.node();\n\n            if (!commentsEntry) {\n              unsetActiveSuggestion();\n\n              break;\n            }\n\n            const id = api.comment!.nodeId(commentsEntry[0]);\n\n            setOption('activeId', id ?? null);\n            isSet = true;\n\n            break;\n          }\n\n          leaf = leaf.parentElement;\n        }\n\n        if (!isSet) unsetActiveSuggestion();\n      },\n    },\n    options: {\n      activeId: null,\n      commentingBlock: null,\n      hotkey: ['meta+shift+m', 'ctrl+shift+m'],\n      hoverId: null,\n      uniquePathMap: new Map(),\n    },\n    useHooks: ({ editor, getOptions }) => {\n      const { hotkey } = getOptions();\n      useHotkeys(\n        hotkey!,\n        (e) => {\n          if (!editor.selection) return;\n\n          e.preventDefault();\n\n          if (!editor.api.isExpanded()) return;\n        },\n        {\n          enableOnContentEditable: true,\n        }\n      );\n    },\n  }\n);\n",
      "type": "registry:component",
      "target": "components/editor/plugins/comments-plugin.tsx"
    }
  ],
  "name": "comments-plugin",
  "registryDependencies": [
    "block-discussion"
  ],
  "type": "registry:component",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}