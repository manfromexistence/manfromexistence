{
  "dependencies": [
    "html2canvas",
    "pdf-lib"
  ],
  "doc": {
    "description": "A toolbar button to export editor content as PDF.",
    "docs": [
      {
        "route": "/docs/export",
        "title": "Export"
      }
    ],
    "examples": [
      "basic-nodes-demo"
    ],
    "label": "New",
    "title": "Export Toolbar Button"
  },
  "files": [
    {
      "path": "plate-ui/export-toolbar-button.tsx",
      "content": "'use client';\n\nimport React from 'react';\n\nimport type { DropdownMenuProps } from '@radix-ui/react-dropdown-menu';\n\nimport { withProps } from '@udecode/cn';\nimport {\n  BaseParagraphPlugin,\n  createSlateEditor,\n  serializeHtml,\n  SlateLeaf,\n} from '@udecode/plate';\nimport { BaseAlignPlugin } from '@udecode/plate-alignment';\nimport {\n  BaseBoldPlugin,\n  BaseCodePlugin,\n  BaseItalicPlugin,\n  BaseStrikethroughPlugin,\n  BaseSubscriptPlugin,\n  BaseSuperscriptPlugin,\n  BaseUnderlinePlugin,\n} from '@udecode/plate-basic-marks';\nimport { BaseBlockquotePlugin } from '@udecode/plate-block-quote';\nimport {\n  BaseCodeBlockPlugin,\n  BaseCodeLinePlugin,\n  BaseCodeSyntaxPlugin,\n} from '@udecode/plate-code-block';\nimport { BaseCommentsPlugin } from '@udecode/plate-comments';\nimport { BaseDatePlugin } from '@udecode/plate-date';\nimport {\n  BaseFontBackgroundColorPlugin,\n  BaseFontColorPlugin,\n  BaseFontSizePlugin,\n} from '@udecode/plate-font';\nimport {\n  BaseHeadingPlugin,\n  BaseTocPlugin,\n  HEADING_KEYS,\n  HEADING_LEVELS,\n} from '@udecode/plate-heading';\nimport { BaseHighlightPlugin } from '@udecode/plate-highlight';\nimport { BaseHorizontalRulePlugin } from '@udecode/plate-horizontal-rule';\nimport { BaseIndentPlugin } from '@udecode/plate-indent';\nimport { BaseIndentListPlugin } from '@udecode/plate-indent-list';\nimport { BaseKbdPlugin } from '@udecode/plate-kbd';\nimport { BaseColumnItemPlugin, BaseColumnPlugin } from '@udecode/plate-layout';\nimport { BaseLineHeightPlugin } from '@udecode/plate-line-height';\nimport { BaseLinkPlugin } from '@udecode/plate-link';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\nimport {\n  BaseEquationPlugin,\n  BaseInlineEquationPlugin,\n} from '@udecode/plate-math';\nimport {\n  BaseAudioPlugin,\n  BaseFilePlugin,\n  BaseImagePlugin,\n  BaseMediaEmbedPlugin,\n  BaseVideoPlugin,\n} from '@udecode/plate-media';\nimport { BaseMentionPlugin } from '@udecode/plate-mention';\nimport {\n  BaseTableCellHeaderPlugin,\n  BaseTableCellPlugin,\n  BaseTablePlugin,\n  BaseTableRowPlugin,\n} from '@udecode/plate-table';\nimport { BaseTogglePlugin } from '@udecode/plate-toggle';\nimport { useEditorRef } from '@udecode/plate/react';\nimport { ArrowDownToLineIcon } from 'lucide-react';\nimport Prism from 'prismjs';\n\nimport { BlockquoteElementStatic } from '@/components/plate-ui/blockquote-element-static';\nimport { CodeBlockElementStatic } from '@/components/plate-ui/code-block-element-static';\nimport { CodeLeafStatic } from '@/components/plate-ui/code-leaf-static';\nimport { CodeLineElementStatic } from '@/components/plate-ui/code-line-element-static';\nimport { CodeSyntaxLeafStatic } from '@/components/plate-ui/code-syntax-leaf-static';\nimport { ColumnElementStatic } from '@/components/plate-ui/column-element-static';\nimport { ColumnGroupElementStatic } from '@/components/plate-ui/column-group-element-static';\nimport { CommentLeafStatic } from '@/components/plate-ui/comment-leaf-static';\nimport { DateElementStatic } from '@/components/plate-ui/date-element-static';\nimport { HeadingElementStatic } from '@/components/plate-ui/heading-element-static';\nimport { HighlightLeafStatic } from '@/components/plate-ui/highlight-leaf-static';\nimport { HrElementStatic } from '@/components/plate-ui/hr-element-static';\nimport { ImageElementStatic } from '@/components/plate-ui/image-element-static';\nimport {\n  FireLiComponent,\n  FireMarker,\n} from '@/components/plate-ui/indent-fire-marker';\nimport {\n  TodoLiStatic,\n  TodoMarkerStatic,\n} from '@/components/plate-ui/indent-todo-marker-static';\nimport { KbdLeafStatic } from '@/components/plate-ui/kbd-leaf-static';\nimport { LinkElementStatic } from '@/components/plate-ui/link-element-static';\nimport { MediaAudioElementStatic } from '@/components/plate-ui/media-audio-element-static';\nimport { MediaFileElementStatic } from '@/components/plate-ui/media-file-element-static';\nimport { MediaVideoElementStatic } from '@/components/plate-ui/media-video-element-static';\nimport { MentionElementStatic } from '@/components/plate-ui/mention-element-static';\nimport { ParagraphElementStatic } from '@/components/plate-ui/paragraph-element-static';\nimport {\n  TableCellElementStatic,\n  TableCellHeaderStaticElement,\n} from '@/components/plate-ui/table-cell-element-static';\nimport { TableElementStatic } from '@/components/plate-ui/table-element-static';\nimport { TableRowElementStatic } from '@/components/plate-ui/table-row-element-static';\nimport { TocElementStatic } from '@/components/plate-ui/toc-element-static';\nimport { ToggleElementStatic } from '@/components/plate-ui/toggle-element-static';\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  useOpenState,\n} from './dropdown-menu';\nimport { EditorStatic } from './editor-static';\nimport { EquationElementStatic } from './equation-element-static';\nimport { InlineEquationElementStatic } from './inline-equation-element-static';\nimport { ToolbarButton } from './toolbar';\n\nconst siteUrl = 'https://platejs.org';\n\nexport function ExportToolbarButton({ children, ...props }: DropdownMenuProps) {\n  const editor = useEditorRef();\n  const openState = useOpenState();\n\n  const getCanvas = async () => {\n    const { default: html2canvas } = await import('html2canvas');\n\n    const style = document.createElement('style');\n    document.head.append(style);\n    style.sheet?.insertRule(\n      'body > div:last-child img { display: inline-block !important; }'\n    );\n\n    const canvas = await html2canvas(editor.api.toDOMNode(editor)!);\n    style.remove();\n\n    return canvas;\n  };\n\n  const downloadFile = async (url: string, filename: string) => {\n    const response = await fetch(url);\n\n    const blob = await response.blob();\n    const blobUrl = window.URL.createObjectURL(blob);\n\n    const link = document.createElement('a');\n    link.href = blobUrl;\n    link.download = filename;\n    document.body.append(link);\n    link.click();\n    link.remove();\n\n    // Clean up the blob URL\n    window.URL.revokeObjectURL(blobUrl);\n  };\n\n  const exportToPdf = async () => {\n    const canvas = await getCanvas();\n\n    const PDFLib = await import('pdf-lib');\n    const pdfDoc = await PDFLib.PDFDocument.create();\n    const page = pdfDoc.addPage([canvas.width, canvas.height]);\n    const imageEmbed = await pdfDoc.embedPng(canvas.toDataURL('PNG'));\n    const { height, width } = imageEmbed.scale(1);\n    page.drawImage(imageEmbed, {\n      height,\n      width,\n      x: 0,\n      y: 0,\n    });\n    const pdfBase64 = await pdfDoc.saveAsBase64({ dataUri: true });\n\n    await downloadFile(pdfBase64, 'plate.pdf');\n  };\n\n  const exportToImage = async () => {\n    const canvas = await getCanvas();\n    await downloadFile(canvas.toDataURL('image/png'), 'plate.png');\n  };\n\n  const exportToHtml = async () => {\n    const components = {\n      [BaseAudioPlugin.key]: MediaAudioElementStatic,\n      [BaseBlockquotePlugin.key]: BlockquoteElementStatic,\n      [BaseBoldPlugin.key]: withProps(SlateLeaf, { as: 'strong' }),\n      [BaseCodeBlockPlugin.key]: CodeBlockElementStatic,\n      [BaseCodeLinePlugin.key]: CodeLineElementStatic,\n      [BaseCodePlugin.key]: CodeLeafStatic,\n      [BaseCodeSyntaxPlugin.key]: CodeSyntaxLeafStatic,\n      [BaseColumnItemPlugin.key]: ColumnElementStatic,\n      [BaseColumnPlugin.key]: ColumnGroupElementStatic,\n      [BaseCommentsPlugin.key]: CommentLeafStatic,\n      [BaseDatePlugin.key]: DateElementStatic,\n      [BaseEquationPlugin.key]: EquationElementStatic,\n      [BaseFilePlugin.key]: MediaFileElementStatic,\n      [BaseHighlightPlugin.key]: HighlightLeafStatic,\n      [BaseHorizontalRulePlugin.key]: HrElementStatic,\n      [BaseImagePlugin.key]: ImageElementStatic,\n      [BaseInlineEquationPlugin.key]: InlineEquationElementStatic,\n      [BaseItalicPlugin.key]: withProps(SlateLeaf, { as: 'em' }),\n      [BaseKbdPlugin.key]: KbdLeafStatic,\n      [BaseLinkPlugin.key]: LinkElementStatic,\n      // [BaseMediaEmbedPlugin.key]: MediaEmbedElementStatic,\n      [BaseMentionPlugin.key]: MentionElementStatic,\n      [BaseParagraphPlugin.key]: ParagraphElementStatic,\n      [BaseStrikethroughPlugin.key]: withProps(SlateLeaf, { as: 'del' }),\n      [BaseSubscriptPlugin.key]: withProps(SlateLeaf, { as: 'sub' }),\n      [BaseSuperscriptPlugin.key]: withProps(SlateLeaf, { as: 'sup' }),\n      [BaseTableCellHeaderPlugin.key]: TableCellHeaderStaticElement,\n      [BaseTableCellPlugin.key]: TableCellElementStatic,\n      [BaseTablePlugin.key]: TableElementStatic,\n      [BaseTableRowPlugin.key]: TableRowElementStatic,\n      [BaseTocPlugin.key]: TocElementStatic,\n      [BaseTogglePlugin.key]: ToggleElementStatic,\n      [BaseUnderlinePlugin.key]: withProps(SlateLeaf, { as: 'u' }),\n      [BaseVideoPlugin.key]: MediaVideoElementStatic,\n      [HEADING_KEYS.h1]: withProps(HeadingElementStatic, { variant: 'h1' }),\n      [HEADING_KEYS.h2]: withProps(HeadingElementStatic, { variant: 'h2' }),\n      [HEADING_KEYS.h3]: withProps(HeadingElementStatic, { variant: 'h3' }),\n      [HEADING_KEYS.h4]: withProps(HeadingElementStatic, { variant: 'h4' }),\n      [HEADING_KEYS.h5]: withProps(HeadingElementStatic, { variant: 'h5' }),\n      [HEADING_KEYS.h6]: withProps(HeadingElementStatic, { variant: 'h6' }),\n    };\n\n    const editorStatic = createSlateEditor({\n      plugins: [\n        BaseColumnPlugin,\n        BaseColumnItemPlugin,\n        BaseTocPlugin,\n        BaseVideoPlugin,\n        BaseAudioPlugin,\n        BaseParagraphPlugin,\n        BaseHeadingPlugin,\n        BaseMediaEmbedPlugin,\n        BaseBoldPlugin,\n        BaseCodePlugin,\n        BaseItalicPlugin,\n        BaseStrikethroughPlugin,\n        BaseSubscriptPlugin,\n        BaseSuperscriptPlugin,\n        BaseUnderlinePlugin,\n        BaseBlockquotePlugin,\n        BaseDatePlugin,\n        BaseEquationPlugin,\n        BaseInlineEquationPlugin,\n        BaseCodeBlockPlugin.configure({\n          options: {\n            prism: Prism,\n          },\n        }),\n        BaseIndentPlugin.extend({\n          inject: {\n            targetPlugins: [\n              BaseParagraphPlugin.key,\n              BaseBlockquotePlugin.key,\n              BaseCodeBlockPlugin.key,\n            ],\n          },\n        }),\n        BaseIndentListPlugin.extend({\n          inject: {\n            targetPlugins: [\n              BaseParagraphPlugin.key,\n              ...HEADING_LEVELS,\n              BaseBlockquotePlugin.key,\n              BaseCodeBlockPlugin.key,\n              BaseTogglePlugin.key,\n            ],\n          },\n          options: {\n            listStyleTypes: {\n              fire: {\n                liComponent: FireLiComponent,\n                markerComponent: FireMarker,\n                type: 'fire',\n              },\n              todo: {\n                liComponent: TodoLiStatic,\n                markerComponent: TodoMarkerStatic,\n                type: 'todo',\n              },\n            },\n          },\n        }),\n        BaseLinkPlugin,\n        BaseTableRowPlugin,\n        BaseTablePlugin,\n        BaseTableCellPlugin,\n        BaseHorizontalRulePlugin,\n        BaseFontColorPlugin,\n        BaseFontBackgroundColorPlugin,\n        BaseFontSizePlugin,\n        BaseKbdPlugin,\n        BaseAlignPlugin.extend({\n          inject: {\n            targetPlugins: [\n              BaseParagraphPlugin.key,\n              BaseMediaEmbedPlugin.key,\n              ...HEADING_LEVELS,\n              BaseImagePlugin.key,\n            ],\n          },\n        }),\n        BaseLineHeightPlugin,\n        BaseHighlightPlugin,\n        BaseFilePlugin,\n        BaseImagePlugin,\n        BaseMentionPlugin,\n        BaseCommentsPlugin,\n        BaseTogglePlugin,\n      ],\n      value: editor.children,\n    });\n\n    const editorHtml = await serializeHtml(editorStatic, {\n      components,\n      editorComponent: EditorStatic,\n      props: { style: { padding: '0 calc(50% - 350px)', paddingBottom: '' } },\n    });\n\n    const prismCss = `<link rel=\"stylesheet\" href=\"${siteUrl}/prism.css\">`;\n    const tailwindCss = `<link rel=\"stylesheet\" href=\"${siteUrl}/tailwind.css\">`;\n    const katexCss = `<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.18/dist/katex.css\" integrity=\"sha384-9PvLvaiSKCPkFKB1ZsEoTjgnJn+O3KvEwtsz37/XrkYft3DTk2gHdYvd9oWgW3tV\" crossorigin=\"anonymous\">`;\n\n    const html = `<!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"color-scheme\" content=\"light dark\" />\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400..700&family=JetBrains+Mono:wght@400..700&display=swap\"\n          rel=\"stylesheet\"\n        />\n        ${tailwindCss}\n        ${prismCss}\n        ${katexCss}\n        <style>\n          :root {\n            --font-sans: 'Inter', 'Inter Fallback';\n            --font-mono: 'JetBrains Mono', 'JetBrains Mono Fallback';\n          }\n        </style>\n      </head>\n      <body>\n        ${editorHtml}\n      </body>\n    </html>`;\n\n    const url = `data:text/html;charset=utf-8,${encodeURIComponent(html)}`;\n\n    await downloadFile(url, 'plate.html');\n  };\n\n  const exportToMarkdown = async () => {\n    const md = editor.getApi(MarkdownPlugin).markdown.serialize();\n    const url = `data:text/markdown;charset=utf-8,${encodeURIComponent(md)}`;\n    await downloadFile(url, 'plate.md');\n  };\n\n  return (\n    <DropdownMenu modal={false} {...openState} {...props}>\n      <DropdownMenuTrigger asChild>\n        <ToolbarButton pressed={openState.open} tooltip=\"Export\" isDropdown>\n          <ArrowDownToLineIcon className=\"size-4\" />\n        </ToolbarButton>\n      </DropdownMenuTrigger>\n\n      <DropdownMenuContent align=\"start\">\n        <DropdownMenuGroup>\n          <DropdownMenuItem onSelect={exportToHtml}>\n            Export as HTML\n          </DropdownMenuItem>\n          <DropdownMenuItem onSelect={exportToPdf}>\n            Export as PDF\n          </DropdownMenuItem>\n          <DropdownMenuItem onSelect={exportToImage}>\n            Export as Image\n          </DropdownMenuItem>\n          <DropdownMenuItem onSelect={exportToMarkdown}>\n            Export as Markdown\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/plate-ui/export-toolbar-button.tsx"
    }
  ],
  "name": "export-toolbar-button",
  "registryDependencies": [
    "toolbar"
  ],
  "type": "registry:ui",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}