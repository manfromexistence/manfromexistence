import type { SidebarNavItem } from '@/types/nav';

export const docsApi: SidebarNavItem[] = [
  {
    description: 'Plate API.',
    headings: [],
    href: '/docs/api/plate',
    title: 'Plate',
  },
  {
    description: 'Slate API.',
    headings: [],
    href: '/docs/api/slate',
    items: [
      {
        href: '/docs/api/slate/editor-api',
        title: 'Editor API',
      },
      {
        href: '/docs/api/slate/editor-transforms',
        title: 'Editor Transforms',
      },
      {
        href: '/docs/api/slate/node',
        title: 'Node',
      },
      {
        href: '/docs/api/slate/element',
        title: 'Element',
      },
      {
        href: '/docs/api/slate/text',
        title: 'Text',
      },
      {
        href: '/docs/api/slate/path',
        title: 'Path',
      },
      {
        href: '/docs/api/slate/point',
        title: 'Point',
      },
      {
        href: '/docs/api/slate/range',
        title: 'Range',
      },
      {
        href: '/docs/api/slate/location',
        title: 'Location',
      },
      {
        href: '/docs/api/slate/location-ref',
        title: 'Location Ref',
      },
      {
        href: '/docs/api/slate/operation',
        title: 'Operation',
      },
    ],
    label: 'v42',
    title: 'Slate',
  },
  {
    description: 'Core utilities for Plate.',
    headings: [
      'createAtomStore',
      'createDeserializeAstPlugin',
      'createHtmlPlugin',
      'createEditorProtocolPlugin',
      'createEventEditorPlugin',
      'createHistoryPlugin',
      'createInlineVoidPlugin',
      'createInsertDataPlugin',
      'createPlateEditor',
      'createSlatePlugin',
      'createPrevSelectionPlugin',
      'createPlatePlugin',
      'getPlugin',
      'getPluginInjectProps',
      'getPluginOptions',
      'getPluginType',
      'Hotkeys',
      'toggleBlock',
      'useEditorRef',
      'useEditorState',
      'useElement',
      'useEditorReadOnly',
      'useEditorSelection',
      'useEditorVersion',
      'useSelectionVersion',
      'withPlate',
      'withTReact',
    ],
    href: '/docs/api/core',
    items: [
      {
        headings: [
          'PlateProps',
          'PlateContent',
          'id',
          'children',
          'decorate',
          'disableCorePlugins',
          'editableProps',
          'editableRef',
          'editor',
          'firstChildren',
          'initialValue',
          'normalizeInitialValue',
          'onChange',
          'plugins',
          'renderEditable',
          'renderElement',
          'renderLeaf',
          'value',
        ],
        href: '/docs/api/core/plate-components',
        title: 'Plate Components',
      },
      {
        headings: [
          'currentKeyboardEvent',
          'key',
          'plugins',
          'pluginsByKey',
          'prevSelection',
          'redecorate',
          'reset',
        ],
        href: '/docs/api/core/plate-editor',
        title: 'Plate Editor',
      },
      {
        headings: [
          'key',
          'component',
          'decorate',
          'html',
          'attributeNames',
          'getNode',
          'query',
          'rules',
          'validAttribute',
          'validClassName',
          'validNodeName',
          'validStyle',
          'withoutChildren',
          'editor',
          'insertData',
          'format',
          'getFragment',
          'preInsert',
          'transformData',
          'transformFragment',
          'handlers',
          'onKeyDown',
          'onDrop',
          'onDragStart',
          'inject',
          'aboveComponent',
          'belowComponent',
          'pluginsByKey',
          'className',
          'defaultNodeValue',
          'nodeKey',
          'styleKey',
          'transformClassName',
          'transformNodeValue',
          'transformStyle',
          'validNodeValues',
          'targetPlugins',
          'isInline',
          'isElement',
          'isLeaf',
          'isVoid',
          'normalizeInitialValue',
          'options',
          'overrideByKey',
          'plugins',
          'props',
          'aboveEditable',
          'aboveSlate',
          'afterEditable',
          'beforeEditable',
          'serializeHtml',
          'then',
          'type',
          'useHooks',
          'extendEditor',
        ],
        href: '/docs/api/core/plate-plugin',
        title: 'Plate Plugin',
      },
      {
        headings: ['useEventEditorSelectors', 'useEventPlateId'],
        href: '/docs/api/core/plate-store',
        title: 'Plate Store',
      },
      {
        headings: [
          'platecontroller-store',
          'state',
          'activeId',
          'primaryEditorIds',
          'editorStores',
          'usage-patterns',
          'specific-editor-by-id',
          'active-editor',
          'dealing-with-fallback-editors',
        ],
        href: '/docs/api/core/plate-controller',
        title: 'Plate Controller',
      },
    ],
    title: 'Plate Core',
  },
  {
    description: 'Additional utilities for Plate.',
    headings: [],
    href: '/docs/api/utils',
    title: 'Plate Utils',
  },
  {
    description: 'React utilities.',
    headings: [
      'PortalBody',
      'Text',
      'Box',
      'createPrimitiveComponent',
      'createSlotComponent',
      'withProviders',
    ],
    href: '/docs/api/react-utils',
    title: 'React Utils',
  },
  {
    description: 'Class utilities.',
    headings: ['cn', 'withCn', 'withProps', 'withVariants'],
    href: '/docs/api/cn',
    title: 'cn',
  },
  {
    description: 'API reference for @udecode/plate-floating',
    headings: [],
    href: '/docs/api/floating',
    title: 'Floating',
  },
  {
    description: 'API reference for @udecode/plate-resizable',
    headings: [],
    href: '/docs/api/resizable',
    title: 'Resizable',
  },
];
