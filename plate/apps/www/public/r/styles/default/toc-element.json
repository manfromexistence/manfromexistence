{
  "dependencies": [
    "@udecode/plate-heading"
  ],
  "doc": {
    "description": "A table of contents component with links to document headings.",
    "docs": [
      {
        "route": "/docs/basic-elements"
      },
      {
        "route": "https://pro.platejs.org/docs/components/toc-element"
      }
    ],
    "examples": [
      "toc-demo",
      "toc-pro"
    ],
    "label": "New",
    "title": "TOC Element"
  },
  "files": [
    {
      "path": "plate-ui/toc-element.tsx",
      "content": "'use client';\n\nimport { cn, withRef } from '@udecode/cn';\nimport {\n  useTocElement,\n  useTocElementState,\n} from '@udecode/plate-heading/react';\nimport { cva } from 'class-variance-authority';\n\nimport { Button } from './button';\nimport { PlateElement } from './plate-element';\n\nconst headingItemVariants = cva(\n  'block h-auto w-full cursor-pointer truncate rounded-none px-0.5 py-1.5 text-left font-medium text-muted-foreground underline decoration-[0.5px] underline-offset-4 hover:bg-accent hover:text-muted-foreground',\n  {\n    variants: {\n      depth: {\n        1: 'pl-0.5',\n        2: 'pl-[26px]',\n        3: 'pl-[50px]',\n      },\n    },\n  }\n);\n\nexport const TocElement = withRef<typeof PlateElement>(\n  ({ children, className, ...props }, ref) => {\n    const state = useTocElementState();\n\n    const { props: btnProps } = useTocElement(state);\n\n    const { headingList } = state;\n\n    return (\n      <PlateElement ref={ref} className={cn(className, 'mb-1 p-0')} {...props}>\n        <div contentEditable={false}>\n          {headingList.length > 0 ? (\n            headingList.map((item) => (\n              <Button\n                key={item.id}\n                variant=\"ghost\"\n                className={cn(\n                  headingItemVariants({ depth: item.depth as any })\n                )}\n                onClick={(e) => btnProps.onClick(e, item, 'smooth')}\n                aria-current\n              >\n                {item.title}\n              </Button>\n            ))\n          ) : (\n            <div className=\"text-sm text-gray-500\">\n              Create a heading to display the table of contents.\n            </div>\n          )}\n        </div>\n        {children}\n      </PlateElement>\n    );\n  }\n);\n",
      "type": "registry:ui",
      "target": "components/plate-ui/toc-element.tsx"
    },
    {
      "path": "plate-ui/toc-element-static.tsx",
      "content": "import React from 'react';\n\nimport type { SlateEditor, SlateElementProps, TElement } from '@udecode/plate';\n\nimport { cn } from '@udecode/cn';\nimport { NodeApi, SlateElement } from '@udecode/plate';\nimport {\n  type Heading,\n  BaseTocPlugin,\n  HEADING_KEYS,\n  isHeading,\n} from '@udecode/plate-heading';\nimport { cva } from 'class-variance-authority';\n\nimport { Button } from './button';\n\nconst headingItemVariants = cva(\n  'block h-auto w-full cursor-pointer truncate rounded-none px-0.5 py-1.5 text-left font-medium text-muted-foreground underline decoration-[0.5px] underline-offset-4 hover:bg-accent hover:text-muted-foreground',\n  {\n    variants: {\n      depth: {\n        1: 'pl-0.5',\n        2: 'pl-[26px]',\n        3: 'pl-[50px]',\n      },\n    },\n  }\n);\n\nexport function TocElementStatic({\n  children,\n  className,\n  ...props\n}: SlateElementProps) {\n  const { editor } = props;\n  const headingList = getHeadingList(editor);\n\n  return (\n    <SlateElement className={cn(className, 'mb-1 p-0')} {...props}>\n      <div>\n        {headingList.length > 0 ? (\n          headingList.map((item) => (\n            <Button\n              key={item.title}\n              variant=\"ghost\"\n              className={cn(headingItemVariants({ depth: item.depth as any }))}\n            >\n              {item.title}\n            </Button>\n          ))\n        ) : (\n          <div className=\"text-sm text-gray-500\">\n            Create a heading to display the table of contents.\n          </div>\n        )}\n      </div>\n      {children}\n    </SlateElement>\n  );\n}\n\nconst headingDepth: Record<string, number> = {\n  [HEADING_KEYS.h1]: 1,\n  [HEADING_KEYS.h2]: 2,\n  [HEADING_KEYS.h3]: 3,\n  [HEADING_KEYS.h4]: 4,\n  [HEADING_KEYS.h5]: 5,\n  [HEADING_KEYS.h6]: 6,\n};\n\nconst getHeadingList = (editor?: SlateEditor) => {\n  if (!editor) return [];\n\n  const options = editor.getOptions(BaseTocPlugin);\n\n  if (options.queryHeading) {\n    return options.queryHeading(editor);\n  }\n\n  const headingList: Heading[] = [];\n\n  const values = editor.api.nodes<TElement>({\n    at: [],\n    match: (n) => isHeading(n),\n  });\n\n  if (!values) return [];\n\n  Array.from(values, ([node, path]) => {\n    const { type } = node;\n    const title = NodeApi.string(node);\n    const depth = headingDepth[type];\n    const id = node.id as string;\n    title && headingList.push({ id, depth, path, title, type });\n  });\n\n  return headingList;\n};\n",
      "type": "registry:ui",
      "target": "components/plate-ui/toc-element-static.tsx"
    }
  ],
  "name": "toc-element",
  "registryDependencies": [],
  "type": "registry:ui",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}