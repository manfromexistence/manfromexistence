{
  "dependencies": [
    "ai",
    "@faker-js/faker"
  ],
  "files": [
    {
      "path": "components/editor/use-chat.ts",
      "content": "'use client';\n\nimport { faker } from '@faker-js/faker';\nimport { useChat as useBaseChat } from 'ai/react';\n\nimport { useSettings } from '@/components/editor/settings';\n\nexport const useChat = () => {\n  const { keys, model } = useSettings();\n\n  return useBaseChat({\n    id: 'editor',\n    api: '/api/ai/command',\n    body: {\n      // !!! DEMO ONLY: don't use API keys client-side\n      apiKey: keys.openai,\n      model: model.value,\n    },\n    fetch: async (input, init) => {\n      const res = await fetch(input, init);\n\n      if (!res.ok) {\n        // Mock the API response. Remove it when you implement the route /api/ai/command\n        await new Promise((resolve) => setTimeout(resolve, 400));\n\n        const stream = fakeStreamText();\n\n        return new Response(stream, {\n          headers: {\n            Connection: 'keep-alive',\n            'Content-Type': 'text/plain',\n          },\n        });\n      }\n\n      return res;\n    },\n  });\n};\n\n// Used for testing. Remove it after implementing useChat api.\nconst fakeStreamText = ({\n  chunkCount = 10,\n  streamProtocol = 'data',\n}: {\n  chunkCount?: number;\n  streamProtocol?: 'data' | 'text';\n} = {}) => {\n  // Create 3 blocks with different lengths\n  const blocks = [\n    Array.from({ length: chunkCount }, () => ({\n      delay: faker.number.int({ max: 100, min: 30 }),\n      texts: faker.lorem.words({ max: 3, min: 1 }) + ' ',\n    })),\n    Array.from({ length: chunkCount + 2 }, () => ({\n      delay: faker.number.int({ max: 100, min: 30 }),\n      texts: faker.lorem.words({ max: 3, min: 1 }) + ' ',\n    })),\n    Array.from({ length: chunkCount + 4 }, () => ({\n      delay: faker.number.int({ max: 100, min: 30 }),\n      texts: faker.lorem.words({ max: 3, min: 1 }) + ' ',\n    })),\n  ];\n\n  const encoder = new TextEncoder();\n\n  return new ReadableStream({\n    async start(controller) {\n      for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i];\n\n        // Stream the block content\n        for (const chunk of block) {\n          await new Promise((resolve) => setTimeout(resolve, chunk.delay));\n\n          if (streamProtocol === 'text') {\n            controller.enqueue(encoder.encode(chunk.texts));\n          } else {\n            controller.enqueue(\n              encoder.encode(`0:${JSON.stringify(chunk.texts)}\\n`)\n            );\n          }\n        }\n\n        // Add double newline after each block except the last one\n        if (i < blocks.length - 1) {\n          if (streamProtocol === 'text') {\n            controller.enqueue(encoder.encode('\\n\\n'));\n          } else {\n            controller.enqueue(encoder.encode(`0:${JSON.stringify('\\n\\n')}\\n`));\n          }\n        }\n      }\n\n      if (streamProtocol === 'data') {\n        controller.enqueue(\n          `d:{\"finishReason\":\"stop\",\"usage\":{\"promptTokens\":0,\"completionTokens\":${blocks.reduce(\n            (sum, block) => sum + block.length,\n            0\n          )}}}\\n`\n        );\n      }\n\n      controller.close();\n    },\n  });\n};\n",
      "type": "registry:component",
      "target": "components/editor/use-chat.ts"
    }
  ],
  "name": "use-chat",
  "registryDependencies": [],
  "type": "registry:component",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}