{
  "dependencies": [
    "@udecode/plate-date"
  ],
  "doc": {
    "description": "A date field component with calendar picker.",
    "docs": [
      {
        "route": "/docs/date"
      },
      {
        "route": "https://pro.platejs.org/docs/components/date-element"
      }
    ],
    "examples": [
      "date-demo"
    ],
    "label": "New"
  },
  "files": [
    {
      "path": "plate-ui/date-element.tsx",
      "content": "'use client';\n\nimport { cn, withRef } from '@udecode/cn';\nimport { useReadOnly } from '@udecode/plate/react';\n\nimport { Calendar } from './calendar';\nimport { PlateElement } from './plate-element';\nimport { Popover, PopoverContent, PopoverTrigger } from './popover';\n\nexport const DateElement = withRef<typeof PlateElement>(\n  ({ children, className, ...props }, ref) => {\n    const { editor, element } = props;\n\n    const readOnly = useReadOnly();\n\n    const trigger = (\n      <span\n        className={cn(\n          'w-fit cursor-pointer rounded-sm bg-muted px-1 text-muted-foreground'\n        )}\n        contentEditable={false}\n        draggable\n      >\n        {element.date ? (\n          (() => {\n            const today = new Date();\n            const elementDate = new Date(element.date as string);\n            const isToday =\n              elementDate.getDate() === today.getDate() &&\n              elementDate.getMonth() === today.getMonth() &&\n              elementDate.getFullYear() === today.getFullYear();\n\n            const isYesterday =\n              new Date(today.setDate(today.getDate() - 1)).toDateString() ===\n              elementDate.toDateString();\n            const isTomorrow =\n              new Date(today.setDate(today.getDate() + 2)).toDateString() ===\n              elementDate.toDateString();\n\n            if (isToday) return 'Today';\n            if (isYesterday) return 'Yesterday';\n            if (isTomorrow) return 'Tomorrow';\n\n            return elementDate.toLocaleDateString(undefined, {\n              day: 'numeric',\n              month: 'long',\n              year: 'numeric',\n            });\n          })()\n        ) : (\n          <span>Pick a date</span>\n        )}\n      </span>\n    );\n\n    if (readOnly) {\n      return trigger;\n    }\n\n    return (\n      <PlateElement\n        ref={ref}\n        className={cn(className, 'inline-block')}\n        contentEditable={false}\n        {...props}\n      >\n        <Popover>\n          <PopoverTrigger asChild>{trigger}</PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\">\n            <Calendar\n              selected={new Date(element.date as string)}\n              onSelect={(date) => {\n                if (!date) return;\n\n                editor.tf.setNodes(\n                  { date: date.toDateString() },\n                  { at: element }\n                );\n              }}\n              mode=\"single\"\n              initialFocus\n            />\n          </PopoverContent>\n        </Popover>\n        {children}\n      </PlateElement>\n    );\n  }\n);\n",
      "type": "registry:ui",
      "target": "components/plate-ui/date-element.tsx"
    },
    {
      "path": "plate-ui/date-element-static.tsx",
      "content": "import React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate';\n\nimport { cn } from '@udecode/cn';\nimport { SlateElement } from '@udecode/plate';\n\nexport function DateElementStatic({\n  children,\n  className,\n  ...props\n}: SlateElementProps) {\n  const { element } = props;\n\n  return (\n    <SlateElement className={cn(className, 'inline-block')} {...props}>\n      <span\n        className={cn('w-fit rounded-sm bg-muted px-1 text-muted-foreground')}\n      >\n        {element.date ? (\n          (() => {\n            const today = new Date();\n            const elementDate = new Date(element.date as string);\n            const isToday =\n              elementDate.getDate() === today.getDate() &&\n              elementDate.getMonth() === today.getMonth() &&\n              elementDate.getFullYear() === today.getFullYear();\n\n            const isYesterday =\n              new Date(today.setDate(today.getDate() - 1)).toDateString() ===\n              elementDate.toDateString();\n            const isTomorrow =\n              new Date(today.setDate(today.getDate() + 2)).toDateString() ===\n              elementDate.toDateString();\n\n            if (isToday) return 'Today';\n            if (isYesterday) return 'Yesterday';\n            if (isTomorrow) return 'Tomorrow';\n\n            return elementDate.toLocaleDateString(undefined, {\n              day: 'numeric',\n              month: 'long',\n              year: 'numeric',\n            });\n          })()\n        ) : (\n          <span>Pick a date</span>\n        )}\n      </span>\n      {children}\n    </SlateElement>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/plate-ui/date-element-static.tsx"
    }
  ],
  "name": "date-element",
  "registryDependencies": [
    "calendar",
    "plate-element"
  ],
  "type": "registry:ui",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}