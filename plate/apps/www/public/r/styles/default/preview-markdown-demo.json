{
  "files": [
    {
      "path": "examples/preview-markdown-demo.tsx",
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn } from '@udecode/cn';\nimport {\n  type Decorate,\n  type RenderLeafProps,\n  type TText,\n  createSlatePlugin,\n  TextApi,\n} from '@udecode/plate';\nimport { BasicElementsPlugin } from '@udecode/plate-basic-elements/react';\nimport { BasicMarksPlugin } from '@udecode/plate-basic-marks/react';\nimport { Plate } from '@udecode/plate/react';\nimport Prism from 'prismjs';\n\nimport { useCreateEditor } from '@/components/editor/use-create-editor';\nimport { previewMdValue } from '@/registry/default/examples/values/preview-md-value';\nimport { Editor, EditorContainer } from '@/components/plate-ui/editor';\n\nimport 'prismjs/components/prism-markdown.js';\n\n/** Decorate texts with markdown preview. */\nconst decoratePreview: Decorate = ({ entry: [node, path] }) => {\n  const ranges: any[] = [];\n\n  if (!TextApi.isText(node)) {\n    return ranges;\n  }\n\n  const getLength = (token: any) => {\n    if (typeof token === 'string') {\n      return token.length;\n    }\n    if (typeof token.content === 'string') {\n      return token.content.length;\n    }\n\n    return token.content.reduce((l: any, t: any) => l + getLength(t), 0);\n  };\n\n  const tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n  let start = 0;\n\n  for (const token of tokens) {\n    const length = getLength(token);\n    const end = start + length;\n\n    if (typeof token !== 'string') {\n      ranges.push({\n        anchor: { offset: start, path },\n        focus: { offset: end, path },\n        [token.type]: true,\n      });\n    }\n\n    start = end;\n  }\n\n  return ranges;\n};\n\nfunction PreviewLeaf({\n  attributes,\n  children,\n  leaf,\n}: RenderLeafProps<\n  {\n    blockquote?: boolean;\n    bold?: boolean;\n    code?: boolean;\n    hr?: boolean;\n    italic?: boolean;\n    list?: boolean;\n    title?: boolean;\n  } & TText\n>) {\n  const { blockquote, bold, code, hr, italic, list, title } = leaf;\n\n  return (\n    <span\n      {...attributes}\n      className={cn(\n        bold && 'font-bold',\n        italic && 'italic',\n        title && 'mx-0 mt-5 mb-2.5 inline-block text-[20px] font-bold',\n        list && 'pl-2.5 text-[20px] leading-[10px]',\n        hr && 'block border-b-2 border-[#ddd] text-center',\n        blockquote &&\n          'inline-block border-l-2 border-[#ddd] pl-2.5 text-[#aaa] italic',\n        code && 'bg-[#eee] p-[3px] font-mono'\n      )}\n    >\n      {children}\n    </span>\n  );\n}\n\nexport default function PreviewMdDemo() {\n  const editor = useCreateEditor({\n    plugins: [\n      BasicElementsPlugin,\n      BasicMarksPlugin,\n      createSlatePlugin({\n        key: 'preview-markdown',\n        decorate: decoratePreview,\n      }),\n    ],\n    value: previewMdValue,\n  });\n\n  return (\n    <Plate editor={editor}>\n      <EditorContainer>\n        <Editor renderLeaf={PreviewLeaf} />\n      </EditorContainer>\n    </Plate>\n  );\n}\n",
      "type": "registry:example",
      "target": "components/preview-markdown-demo.tsx"
    }
  ],
  "name": "preview-markdown-demo",
  "registryDependencies": [],
  "type": "registry:example",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}