{
  "dependencies": [
    "@udecode/plate-media",
    "@udecode/plate-resizable"
  ],
  "doc": {
    "description": "Image element with lazy loading, resizing capabilities, and optional caption.",
    "docs": [
      {
        "route": "/docs/media"
      },
      {
        "route": "/docs/api/resizable"
      },
      {
        "route": "https://pro.platejs.org/docs/components/image-element"
      }
    ],
    "examples": [
      "media-demo",
      "media-toolbar-pro"
    ]
  },
  "files": [
    {
      "path": "plate-ui/image-element.tsx",
      "content": "'use client';\n\nimport React from 'react';\n\nimport { cn, withRef } from '@udecode/cn';\nimport { useDraggable } from '@udecode/plate-dnd';\nimport { Image, ImagePlugin, useMediaState } from '@udecode/plate-media/react';\nimport { ResizableProvider, useResizableValue } from '@udecode/plate-resizable';\nimport { withHOC } from '@udecode/plate/react';\n\nimport { Caption, CaptionTextarea } from './caption';\nimport { MediaPopover } from './media-popover';\nimport { PlateElement } from './plate-element';\nimport {\n  mediaResizeHandleVariants,\n  Resizable,\n  ResizeHandle,\n} from './resizable';\n\nexport const ImageElement = withHOC(\n  ResizableProvider,\n  withRef<typeof PlateElement>(\n    ({ children, className, nodeProps, ...props }, ref) => {\n      const { align = 'center', focused, readOnly, selected } = useMediaState();\n\n      const width = useResizableValue('width');\n\n      const { isDragging, handleRef } = useDraggable({\n        element: props.element,\n      });\n\n      return (\n        <MediaPopover plugin={ImagePlugin}>\n          <PlateElement\n            ref={ref}\n            className={cn(className, 'py-2.5')}\n            {...props}\n          >\n            <figure className=\"group relative m-0\" contentEditable={false}>\n              <Resizable\n                align={align}\n                options={{\n                  align,\n                  readOnly,\n                }}\n              >\n                <ResizeHandle\n                  className={mediaResizeHandleVariants({ direction: 'left' })}\n                  options={{ direction: 'left' }}\n                />\n                <Image\n                  ref={handleRef}\n                  className={cn(\n                    'block w-full max-w-full cursor-pointer object-cover px-0',\n                    'rounded-sm',\n                    focused && selected && 'ring-2 ring-ring ring-offset-2',\n                    isDragging && 'opacity-50'\n                  )}\n                  alt=\"\"\n                  {...nodeProps}\n                />\n                <ResizeHandle\n                  className={mediaResizeHandleVariants({\n                    direction: 'right',\n                  })}\n                  options={{ direction: 'right' }}\n                />\n              </Resizable>\n\n              <Caption style={{ width }} align={align}>\n                <CaptionTextarea\n                  readOnly={readOnly}\n                  onFocus={(e) => {\n                    e.preventDefault();\n                  }}\n                  placeholder=\"Write a caption...\"\n                />\n              </Caption>\n            </figure>\n\n            {children}\n          </PlateElement>\n        </MediaPopover>\n      );\n    }\n  )\n);\n",
      "type": "registry:ui",
      "target": "components/plate-ui/image-element.tsx"
    },
    {
      "path": "plate-ui/image-element-static.tsx",
      "content": "import React from 'react';\n\nimport type { SlateElementProps } from '@udecode/plate';\nimport type { TCaptionElement } from '@udecode/plate-caption';\nimport type { TImageElement } from '@udecode/plate-media';\n\nimport { cn } from '@udecode/cn';\nimport { NodeApi, SlateElement } from '@udecode/plate';\n\nexport function ImageElementStatic({\n  children,\n  className,\n  nodeProps,\n  ...props\n}: SlateElementProps) {\n  const {\n    align = 'center',\n    caption,\n    url,\n    width,\n  } = props.element as TImageElement &\n    TCaptionElement & {\n      width: number;\n    };\n\n  return (\n    <SlateElement\n      className={cn(className, 'py-2.5')}\n      {...props}\n      nodeProps={nodeProps}\n    >\n      <figure className=\"group relative m-0 inline-block\" style={{ width }}>\n        <div\n          className=\"relative max-w-full min-w-[92px]\"\n          style={{ textAlign: align }}\n        >\n          <img\n            className={cn(\n              'w-full max-w-full cursor-default object-cover px-0',\n              'rounded-sm'\n            )}\n            alt=\"\"\n            src={url}\n            {...nodeProps}\n          />\n          {caption && (\n            <figcaption className=\"mx-auto mt-2 h-[24px] max-w-full\">\n              {NodeApi.string(caption[0])}\n            </figcaption>\n          )}\n        </div>\n      </figure>\n      {children}\n    </SlateElement>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/plate-ui/image-element-static.tsx"
    }
  ],
  "name": "image-element",
  "registryDependencies": [
    "media-popover",
    "caption",
    "resizable",
    "plate-element"
  ],
  "type": "registry:ui",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}