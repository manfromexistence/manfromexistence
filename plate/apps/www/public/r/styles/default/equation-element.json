{
  "dependencies": [
    "@udecode/plate-math",
    "react-textarea-autosize"
  ],
  "doc": {
    "description": "Displays a LaTeX equation element with an editable popover for inputting and rendering mathematical expressions.",
    "docs": [
      {
        "route": "https://platejs.org/docs/equation",
        "title": "Equation"
      }
    ],
    "examples": [
      "equation-demo"
    ]
  },
  "files": [
    {
      "path": "plate-ui/equation-element.tsx",
      "content": "'use client';\n\nimport React, { useRef, useState } from 'react';\n\nimport type { TEquationElement } from '@udecode/plate-math';\n\nimport { cn, withRef } from '@udecode/cn';\nimport { useEquationElement } from '@udecode/plate-math/react';\nimport { useElement, useSelected } from '@udecode/plate/react';\nimport { RadicalIcon } from 'lucide-react';\n\nimport { EquationPopoverContent } from './equation-popover';\nimport { PlateElement } from './plate-element';\nimport { Popover, PopoverTrigger } from './popover';\n\nexport const EquationElement = withRef<typeof PlateElement>(\n  ({ children, className, ...props }, ref) => {\n    const element = useElement<TEquationElement>();\n\n    const selected = useSelected();\n    const [open, setOpen] = useState(selected);\n    const katexRef = useRef<HTMLDivElement | null>(null);\n\n    useEquationElement({\n      element,\n      katexRef: katexRef,\n      options: {\n        displayMode: true,\n        errorColor: '#cc0000',\n        fleqn: false,\n        leqno: false,\n        macros: { '\\\\f': '#1f(#2)' },\n        output: 'htmlAndMathml',\n        strict: 'warn',\n        throwOnError: false,\n        trust: false,\n      },\n    });\n\n    return (\n      <PlateElement ref={ref} className={cn('my-1', className)} {...props}>\n        <Popover open={open} onOpenChange={setOpen} modal={false}>\n          <PopoverTrigger asChild>\n            <div\n              className={cn(\n                'group flex cursor-pointer items-center justify-center rounded-sm select-none hover:bg-primary/10 data-[selected=true]:bg-primary/10',\n                element.texExpression.length === 0\n                  ? 'bg-muted p-3 pr-9'\n                  : 'px-2 py-1'\n              )}\n              data-selected={selected}\n              contentEditable={false}\n              role=\"button\"\n            >\n              {element.texExpression.length > 0 ? (\n                <span ref={katexRef} />\n              ) : (\n                <div className=\"flex h-7 w-full items-center gap-2 text-sm whitespace-nowrap text-muted-foreground\">\n                  <RadicalIcon className=\"size-6 text-muted-foreground/80\" />\n                  <div>Add a Tex equation</div>\n                </div>\n              )}\n            </div>\n          </PopoverTrigger>\n\n          <EquationPopoverContent\n            open={open}\n            placeholder={`f(x) = \\\\begin{cases}\\n  x^2, &\\\\quad x > 0 \\\\\\\\\\n  0, &\\\\quad x = 0 \\\\\\\\\\n  -x^2, &\\\\quad x < 0\\n\\\\end{cases}`}\n            isInline={false}\n            setOpen={setOpen}\n          />\n        </Popover>\n\n        {children}\n      </PlateElement>\n    );\n  }\n);\n",
      "type": "registry:ui",
      "target": "components/plate-ui/equation-element.tsx"
    },
    {
      "path": "plate-ui/equation-element-static.tsx",
      "content": "import React from 'react';\n\nimport type { TEquationElement } from '@udecode/plate-math';\n\nimport { cn } from '@udecode/cn';\nimport { type SlateElementProps, SlateElement } from '@udecode/plate';\nimport { getEquationHtml } from '@udecode/plate-math';\nimport { RadicalIcon } from 'lucide-react';\n\nexport function EquationElementStatic({\n  children,\n  className,\n  ...props\n}: SlateElementProps) {\n  const element = props.element as TEquationElement;\n\n  const html = getEquationHtml({\n    element,\n    options: {\n      displayMode: true,\n      errorColor: '#cc0000',\n      fleqn: false,\n      leqno: false,\n      macros: { '\\\\f': '#1f(#2)' },\n      output: 'htmlAndMathml',\n      strict: 'warn',\n      throwOnError: false,\n      trust: false,\n    },\n  });\n\n  return (\n    <SlateElement className={cn('my-1', className)} {...props}>\n      <div\n        className={cn(\n          'group flex items-center justify-center rounded-sm select-none hover:bg-primary/10 data-[selected=true]:bg-primary/10',\n          element.texExpression.length === 0 ? 'bg-muted p-3 pr-9' : 'px-2 py-1'\n        )}\n      >\n        {element.texExpression.length > 0 ? (\n          <span\n            dangerouslySetInnerHTML={{\n              __html: html,\n            }}\n          />\n        ) : (\n          <div className=\"flex h-7 w-full items-center gap-2 text-sm whitespace-nowrap text-muted-foreground\">\n            <RadicalIcon className=\"size-6 text-muted-foreground/80\" />\n            <div>Add a Tex equation</div>\n          </div>\n        )}\n      </div>\n      {children}\n    </SlateElement>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/plate-ui/equation-element-static.tsx"
    },
    {
      "path": "plate-ui/equation-popover.tsx",
      "content": "'use client';\n\nimport React, { useEffect } from 'react';\nimport TextareaAutosize, {\n  type TextareaAutosizeProps,\n} from 'react-textarea-autosize';\n\nimport type { TEquationElement } from '@udecode/plate-math';\n\nimport { cn } from '@udecode/cn';\nimport { useEquationInput } from '@udecode/plate-math/react';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\nimport {\n  createPrimitiveComponent,\n  useEditorRef,\n  useElement,\n  useReadOnly,\n} from '@udecode/plate/react';\nimport { CornerDownLeftIcon } from 'lucide-react';\n\nimport { Button } from './button';\nimport { PopoverContent } from './popover';\n\nconst EquationInput = createPrimitiveComponent(TextareaAutosize)({\n  propsHook: useEquationInput,\n});\n\nconst EquationPopoverContent = ({\n  className,\n  isInline,\n  open,\n  setOpen,\n  ...props\n}: {\n  isInline: boolean;\n  open: boolean;\n  setOpen: (open: boolean) => void;\n} & TextareaAutosizeProps) => {\n  const editor = useEditorRef();\n  const readOnly = useReadOnly();\n  const element = useElement<TEquationElement>();\n\n  useEffect(() => {\n    if (isInline && open) {\n      setOpen(true);\n    }\n  }, [isInline, open, setOpen]);\n\n  if (readOnly) return null;\n\n  const onClose = () => {\n    setOpen(false);\n\n    if (isInline) {\n      editor.tf.select(element, { next: true });\n    } else {\n      editor\n        .getApi(BlockSelectionPlugin)\n        .blockSelection.set(element.id as string);\n    }\n  };\n\n  return (\n    <PopoverContent\n      className=\"flex gap-2\"\n      onEscapeKeyDown={(e) => {\n        e.preventDefault();\n      }}\n      contentEditable={false}\n    >\n      <EquationInput\n        className={cn('max-h-[50vh] grow resize-none p-2 text-sm', className)}\n        state={{ isInline, open, onClose }}\n        autoFocus\n        {...props}\n      />\n\n      <Button variant=\"secondary\" className=\"px-3\" onClick={onClose}>\n        Done <CornerDownLeftIcon className=\"size-3.5\" />\n      </Button>\n    </PopoverContent>\n  );\n};\n\nexport { EquationPopoverContent };\n",
      "type": "registry:ui",
      "target": "components/plate-ui/equation-popover.tsx"
    }
  ],
  "name": "equation-element",
  "registryDependencies": [
    "popover"
  ],
  "type": "registry:ui",
  "$schema": "https://platejs.org/schema/registry-item.json",
  "author": "udecode (https://platejs.org)"
}